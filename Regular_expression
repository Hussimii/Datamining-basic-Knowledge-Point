e.g.:
        +: 前面的字符必须至少出现一次-一次或多次；
        ×：前面的字符出现0/1/多次；
        ?：前面的字符最多出现0/1次。

1. 特殊字符： $ ( ) * + . [ ? \  ^ {  |

2. 限定字符：* + ? {n} {n,m} {n,}
        e.g.:只匹配两位或三位章节编号：/Chapter [1-9][0-9]*/        至少一位，至多两位的章节编号：/Chapter [0-9]{1,2}/  -> /Chapter [1-9][0-9]?/ 或/Chapter [1-9][0-9]{0,1}/
        P.S.  * + 为贪婪匹配符,它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。
                e.g.: <H1>Chapter 1 - 介绍正则表达式</H1>   贪婪匹配：/<.*>/  非贪婪：/<.*?>/  只匹配第一个<h1> /<.w+?>/
                通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从"贪心"表达式转换为"非贪心"表达式或者最小匹配。

3. 定位符：^ $ /b /B
        P.S. 不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。
 
 4. 选择
        用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。
                P.S. 其中 ?: 是非捕获元之一，还有两个非捕获元是 ?= 和 ?!，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索
                字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。

5. 元字符
        特殊字符 + 限定字符 + ...
        url: https://www.runoob.com/regexp/regexp-metachar.html

6. 普通字符：没有显式指定为元字符的所有可打印/不可打印字符。包括所有大小写字母、所有数字、所有标点符号和一些其他符号。

7. 运算符优先级
        a. 相同优先级的从左到右进行运算，不同优先级的运算先高后低。
        b.  -> \                                                                        转义符
              -> (), (?:), (?=), []                                               圆括号和方括号
              -> *, +, ?, {n}, {n,}, {n,m}                                限定符
              -> ^, $, \任何元字符、任何字符                  定位点和序列（即：位置和顺序）
              -> |                                                                         替换，"或"操作
             
8. 匹配规则
        a. 基本模式匹配： e.g. ^nnn$  -> 精确匹配
        b. 字符簇  e.g. ^[a-z][0-9]$
        c. 确定重复出现： 字符簇 + {n, }                  e.g. ^[[:alpha:]]{3}$
        
        p.s. * = {0, } + = {1, }  ? = {0, 1}  /- = {-}
