数据库完整性：
    1. 实体完整性 -- 实体完整性要求每个关系（表）有且仅有一个主键，每一个主键值必须唯一，而且不允许为“空”（NULL）或重复。行的完整性。
    2. 参照完整性 -- 表间规则。参照的完整性要求关系中不允许引用不存在的实体。即外键的取值必须是另一个表的主键的有效值，或是“空”值。
            e.g. 若属性组F是关系模式R1的主键，同时F也是关系模式R2的外键，则在R2的关系中，F的取值只允许两种可能：空值或等于R1关系中某个主键值。
                    R1 为被参照关系，R2为参照关系。 现实应用中，外键不一定与 对应的 主键 同名。
    3. 域完整性/ 用户定义完整性 -- 列必须满足某种特定的数据类型或约束。其中约束又包括取值范围、精度等规定。
            e.g. 表中的CHECK、FOREIGN KEY 约束和DEFAULT、 NOT NULL定义都属于域完整性的范畴。
      
   表的组成部分：表头、行、列、值、键。   -------键的值在当前列中具有唯一性。
   
    一般来说，事务是必须满足4个条件（ACID）：：原子性（Atomicity，或称不可分割性）、一致性（Consistency）、隔离性（Isolation，又称独立性）、持久性（Durability）。
        原子性：一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。
        一致性：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。
        隔离性：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。
        持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。
        
    事物控制语句： BEGIN = START TRANSACTION
                                    COMMIT = COMMIT WORK
                                    ROLLBACK
                                    SAVEPOINT identifier
                                    release SAVEPOINT identifier
                                    ROLLBACK to identifier
                                    SET TRANSACTION --> READ UNCOMMITTED, READ COMMITTED, REPEATEABLE READ, SERIALIZABLE.
     
     MYSQL 事务处理主要有两种方法：
        1、用 BEGIN, ROLLBACK, COMMIT来实现
            BEGIN 开始一个事务
            ROLLBACK 事务回滚
            COMMIT 事务确认
        2、直接用 SET 来改变 MySQL 的自动提交模式:
            SET AUTOCOMMIT=0 禁止自动提交
            SET AUTOCOMMIT=1 开启自动提交

索引使用的优劣时：
    索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。
    创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。
    实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。
        优势： 大大提高检索速度。
        劣势：虽然索引大大提高了查询速度，同时却会降低更新表的速度，
            如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。

建立索引会占用磁盘空间的索引文件。

数据类型：大致分为数值型、日期/时间型、字符/字符串型。
    数值型：严格数值数据类型：Integer(Int), SmallInt, Decimal(Dec), Numeric.
                      近似数据数值类型：Float, Real, Double Precision.
                      * 数值类型范围 --> 0, 255/1Bit --> 0, 65 535/2Bit --> 0，16 777 215/3Bit --> 4Bit --> 8Bit
                                                            TINYINT             SMALLINT                MEDIUMINT                    INT         BITINT
                                                            
                                                            4Bit  -->   8Bit                                            M+2       D+2
                                                            Float        Double               DECIMAL    M>D      D>M
                                                            
     日期和时间类型：DATETIME、DATE、TIMESTAMP、TIME和YEAR
                             BIT：       8                     3                  4                    3           1
                             
      字符串类型：CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET
                     BIT： 0-255     0-65535
                     CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。
       
       P.S.: 1、一个汉字占多少长度与编码有关：
                        UTF－8：一个汉字＝3个字节
                        GBK：一个汉字＝2个字节
                 2、varchar(n) 表示 n 个字符，无论汉字和英文，Mysql 都能存入 n 个字符，仅是实际字节长度有所区别
                 3、MySQL 检查长度，可用 SQL 语言来查看：
                        select LENGTH(fieldname) from tablename

不等号：!=  equals to <>
        
COMMAND：
    CREATE DB:  mysqladmin -u root -p create DB
    DROP  DB   :  mysqladmin -u root -p drop DB
    
    CREATE TABLE table_name (column_name, column_type, not null, auto_increment) ENGINE=InnoDB DEFAULT CHARSET=utf8;
    
    LEFT JOIN 和 RIGHT JOIN 在使用时，要注意区分主表。避免查询不必要的数据。通常表行数较少的作为主表，防止查询出来过多的NULL值。
    查询时 WHERE 后面增加 BINARY -> WHERE BINARY + conditions.  可以区分大小写。
    e.g.: SELECT table_a.*, table_b.column FROM table_a LEFT JOIN table_b on table_a.id = table_b.siteid;
    
    UPDATE table SET field = value WHERE (condition); = UPDATE table SET field = REPLACE(field, old_value, new_value);
    
    DELETE FROM table where (clause);
         1、delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除，打个比方，delete 是单杀，truncate 是团灭，drop 是把电脑摔了。
         2、delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和 drop 是 DDL 语句，操作完马上生效，不能回滚。
         3、执行的速度上，drop>truncate>delete，打个比方，drop 是神舟火箭，truncate 是和谐号动车，delete 是自行车。
         
     WHERE a LIKE "%b%".   % 类似于正则表达式中的 *。 %a: 以a结尾 a%: 以a开头. %a%: 含有a   '_a_' 3位中间为a 'a_' 两位开头为a， '_a'两位结尾为a。
                符号： %  _   []   [^]  涉及到查询特殊符号时： 使用者[ % ]， 特殊符号放中间即可。
                
     ORDER BY ... DESC/ASC.
        P.S. gbk编码：直接在后面添加 ORDER BY...
                 utf-8: 需要添加CONVERT关键字: ORDER BY CONVERT(field using gbk);
                 
     GROUP BY 聚合函数， 按...进行分组。
     
     WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）
        e.g.  SELECT name, SUM(singin) as singin_count FROM  employee_tbl GROUP BY name WITH ROLLUP;

    使用coalesce 替代null值。 select coalesce(a,b,c);
    
    DROP: 修改表名--TO、添加/删除字段（任意位置）-DROP/ADD+AFTER/FIRST、修改字段类型/名称--MODIFY/CHANGE、
                    修改默认值--ALTER...ALTER...SET/DROP DEFAULT、修改引擎 ALTER NAME...ENGINE = ...
